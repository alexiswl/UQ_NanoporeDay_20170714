<style>
    body {
      background-image: url(images/twitter_handle.png), url(images/agrf_logo.jpg);
      background-position: top right, bottom right;
      background-repeat: no-repeat, no-repeat;
      background-attachment:fixed;
      background-size: 150px, 200px;
    }
    .section .reveal .state-background {
        background: #7FACAD;
        background-image:  url(images/twitter_handle.png), url(images/agrf_logo.jpg);
        background-position: top right, bottom right;
        background-attachment: fixed;
        background-repeat: no-repeat;
        background-size: 150px, 200px;
    }
    img[alt=plasmid_1] { width: 250px; }
    img[alt=plasmid_2] { width: 250px; }
    img[alt=poreduck] { width: 100px; }
    img[alt=porechop] { width: 300px; }
    img[alt=pauvre] { width: 600px; }

</style>
    
Plasmid Assembly at the AGRF
========================================================
class: body
author: Alexis Lucattini
date: July, 2017
autosize: true

What can you hope to get out of this talk
========================================================
class: body
left: 60%

* Nanopore expectations with low input.
* What plasmids are and why they are useful.
* Applied examples of bioinformatic tools for Nanopore sequencing.
* Potential AGRF partnership with Nanopore sequencing.

*** 

#### List of tools used during this talk.
```{r, echo=FALSE}
# Also set any global variables here.
library(knitr)
library(ggplot2)

NUM_SEGMENTS = 6

tools <- data.frame(Name=c("Poreduck",    "Albacore",    "Porechop", "Pauvre",      "Canu",     "Circlator"),
                 Author=c("A. Lucattini", "ONT",         "R. Wick",  "D. Schultz",  "S. Koren", "M. Hunt"),
                 Focus=c("Data Handling", "Basecalling", "Trimming", "QC-plotting", "Assembly", "Assembly")
                 )
kable(tools, justify=c("center"))
```


Plasmid Background
========================================================
left: 70%  
class: body

- Plasmids are small circular dsDNA sequences, found mainly in bacteria.  
- Bacteria can use plasmids to share genetic information, even between different species.  
- Genes on plasmids can encode for virulence factors or anti-microbial resistance. 
- But scientists can also use plasmids to clone, transfer or manipulate genes
  
***  

![plasmid_1](images/plasmid_cycle.svg.png)
![plasmid_2](images/Plasmid_Conjugation.svg.png)

Traditional Plasmid Sequencing at the AGRF
========================================================
class: body

- Samples sequenced on MiSeq or Sanger.
- Sanger with multiple primers to 'hop' through genome
- MiSeq, huge coverage yet poor assembly.
- Potential market for plasmid length MinION reads.


Nanopore Yields: 
========================================================
### You only get out, what you put in (Nutri-grain et al.)

* High molecular weight DNA ( > 1Âµg) ==> High yields 5-10+ Gbs.
* Low yields in plasmid extraction, sequencing used as confirmation.
* But how low can one go and still achieve their desired outcome?
  * 500 ng?
  * ... 50 ng?

8 plasmids: 4 bigs, 4 smalls
========================================================

```{r, echo=FALSE}
plasmids.df = data.frame(Names=c("YHC6", "YHC7", "YHC8", "YHC17", "JB1", "JB2", "PTS1", "PTS2"),
                         Description=rep(c("Large", "Small"), times=c(4,4)),
                         Starting.Amount=c(39.1, 43.1, 43.3, 50, 50, 50, 50 ,50),
                         Loading.Amount=c(1.43, 0.8, 1.12, 1.28, 10.5, 6.90, 5.85, 6.08)
                         )
ggplot(plasmids.df, aes(x=Names)) + 
  ggtitle("Starting amount (circles) and pre-pooling amount (triangles) by sample") + 
  geom_point(aes(y=Starting.Amount, colour=Description), shape=16, size=3) + 
  geom_point(aes(y=Loading.Amount, colour=Description), shape=17, size=3) +
  ylab("Total Mass of DNA") +
  coord_cartesian(ylim = c(0, 60))

```

***
<small>
* Small plasmids retained through clean-ups better than large plasmids.
* Reasons unknown.
  * Higher quality DNA?
  * Smaller DNA less likely to break?
* Protocol instructs normalise to 700 ng?
* We have a small dilemma...
</small>

A handy workaround.
========================================================

### The problem 
* Highly unbalanced library.
* Can obtain equal sequencing by lowering all inputs
  * Only as good as your lowest yield.

***

### The solution
* Add the good samples once the bad samples have had a go...
* Can use real-time analysis to know when to add.


The real-time analysis pipeline. Part 1/`r NUM_SEGMENTS`
=========================================================
![poreduck](images/poreduck_logo.png)
<small>
Find me on Github.
[www.github.com/alexiswl/poreduck](www.github.com/alexiswl/poreduck)

Two main scripts:
* Transfer data to server and remove from laptop.
* Run albacore through SGE on server.

Both scripts run in real-time.  

***

#### Basic steps of Poreduck pipeline.
* transfer script zips up full read folders and uses Rsync to move folder to server.
* transfer script continues to run until MinKNOW has finished.
* albacore script will unzip and run through basecaller. Outputs a fastq file for each folder. Barcoding compatible.
* This run shows need for low-yield parameter. Zip every 100 fast5 files.
</small>

The real-time analysis pipeline. Part 2/`r NUM_SEGMENTS`
=========================================================
#### ![porechop](images/porechop_logo.png)
<small>
* Removes both ligation and barcoding adapters from nanopore reads.
* Can also quality filter reads with 'unusual results'.
* Useful output summary.

***

```{r, echo=FALSE}
# View output of each bin
bin_table = read.table("data/size_by_barcode.tsv", header=TRUE)
bin_table <- within(bin_table,
                    sample <- factor(sample,
                                     levels=c(paste(plasmids.df$Names), "unclassified")))
ggplot(bin_table, aes(bin, nucleotides)) +
  scale_fill_brewer(palette="Paired") +  
  geom_bar(stat="identity", aes(fill=sample))


```

The real-time analysis pipeline. Part 2/`r NUM_SEGMENTS`
=========================================================
#### Road block:
* Large amount of unclassified reads.
* Potential library step issue.
  * DNA extraction? 
  * End-prep issue?
* Could still use for consensus?
</small>

***

```{r, echo=FALSE}
# Same plot as before
ggplot(bin_table, aes(bin, nucleotides)) +
  scale_fill_brewer(palette="Paired") +  
  geom_bar(stat="identity", aes(fill=sample))
```


The real-time analysis pipeline. Part 3/`r NUM_SEGMENTS`
=========================================================
```{r, echo=FALSE}

yields_by_sample=data.frame(aggregate(x=bin_table$nucleotides, by=list(bin_table$sample), FUN=sum))
colnames(yields_by_sample) = c("Sample", "Yield")
kable(yields_by_sample, justify="center")

min_yield = min(yields_by_sample$Yield)
min_sample = yields_by_sample[yields_by_sample$Yield==min_yield, "Sample"]

```


***

Lowest sample yield is `r min_yield` bp for sample `r  min_sample`

* Is this data still useful?  
* We've got 200x coverage.
* What's the read length like?

The real-time analysis pipeline. Part 3/`r NUM_SEGMENTS`
=========================================================

<div id="bg">
  <img src="images/pauvre_min.png" alt="pauvre">
</div> 

***

### Introducing pauvre.
* Margin plot for sample YHC6.  
* We can use these plots to estimate the actual length of the plasmid.
  * Required parameter for Canu
* Documentation can be found on GitHub.


The real-time analysis pipeline. Part 4/`r NUM_SEGMENTS`
=========================================================
### Assembly with Canu
* Now we have our genome length parameter let the assembly begin.

#### Example Canu assembly command
```{bash, eval=F}
canu -d assemblies/barcode06/ -p YHC6 genomeSize=18k \
-nanopore-raw 
```
canu can also invoke your SGE.  
See the docs http://canu.readthedocs.io/en/latest/

The real-time analysis pipeline. Part 4/`r NUM_SEGMENTS`
=========================================================
### When canu fails
* Canu gives quite verbose output and logs.
* In some cases, it may not produce any contigs at all.
* In our case Canu failed on two of the large plasmids.
* There can still be useful partial assemblies that we can examine.
* The `*.contigs.layout.tigInfo` file can give us a clue.



The real-time analysis pipeline. Part 5/`r NUM_SEGMENTS`
=========================================================
### Use circulator to cut edges that may have exceeded.
Using circulator minimus2 we can circularise the assembly
```{bash, eval=FALSE}
circilator minimus2 <input.fasta> <output.prefix>
```


The real-time analysis pipeline. Part 6/`r NUM_SEGMENTS`
=========================================================
### Realign to our circuarlised draft genome.
* Using samtools we can realign our trimmed reads to our draft genome.
* View alignment with IGV. 
* Does everything look right?

The validation process. Circularisation
=========================================================
* Circulariser logs. `circle_dir/sample.log`
  * Did the genome circularise?
  * Good indication of assembly process.
  
***

```{r, echo=FALSE}
# ggplot of the circularisation status over genome size
circularised_genome = read.table("data/genome_status.tsv", header=TRUE)
circularised_genome$Description = plasmids.df[match(circularised_genome$sample, 
                                                    plasmids.df$Names), 
                                              "Description"]
ggplot(data=circularised_genome, aes(x=circularised, y=genome_size))+
  geom_point(aes(colour=Description)) +
  ylab("Length of Genome") + 
  ggtitle("Circular status vs Genome length")
```


The validation process. Circularised Genome
=========================================================
<div id="good_assembly">
  <img src="images/good_assembly.png" alt="good_assembly">
</div> 

The validation process. Non-circularised Genome
=========================================================
<div id="bad_assembly">
  <img src="images/bad_assembly.png" alt="bad_assembly">
</div> 

What about all the unclassified data?
=========================================================
* In this particular run there was a large amount of 
unclassified data. 
* Can we map it to our draft genomes for a greater consensus sequence?
* Repeat the process.
* Outcomes?

<div id="bad_assemby_2">
  <img src="images/bad_assembly_2.png" alt="bad_assembly_2">
</div>

Conclusions/Next Steps: Wet lab
========================================================
* 50 ng input can be successful.
* Library-prep important, QC prior to loading. 
* Library Protocol manipulation, ensure barcodes stick.
* PCR (96) barcoding gDNA.
* For larger plasmids, more input may be required. 

Conclusions/Next Steps: Assembly
========================================================
* Circlator, often good indication of proper assembly.  
* Assembly pipeline is fast for plasmids.
* Complimentary short-read sequencing still required for polishing.
* Real-time analysis pipeline, could play well with read-until api.

Acknowledgements:
========================================================
* AGRF:
  * Ken McGrath
  * Lavinia Gordon
  * Matthew Tinning
  * David Chandler

* WEHI:
  * Matthew Ritchie
  
***

$~$

<div id="good_assembly">
  <img src="images/agrf_logo.jpg" alt="wehi_logo">
</div> 


<div id="good_assembly">
  <img src="images/wehi_logo.jpg" alt="wehi_logo">
</div> 

